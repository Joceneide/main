botão.css

.button{
    border-style: none;
    height: 40px;
    padding: 6px 12px;
    background-color: black;
    color: white;
    font-size: 1rem;
    cursor: pointer;
    transition: box-shadow .6s ease;
}

.button.blue{
    background-color: #1FB6FF;
}

button.green{
    background-color: #13CE66;
}

button.red{
    background-color: #FF4949;
}

.button:hover{
    box-shadow: inset 200px 0 0 #00000055;
}

@media(max-width:480px){
    .button.mobile{
        color:transparent;
        font-size:0;
        width:50px;
        height:50px;
        border-radius: 50%;
        position:fixed;
        top: 90vh;
        left: 80vw;
    }
    .button.mobile::before{
        content: "+";
        color:black;
        font-size:2rem;
        width:100%;
        height:100%;
    }
}
*{
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

:root{
    --primary-color: #FFBA00;
    --secundary-color: #FFF1CC;
    --shadow-color: #CCC;
    --text-color: #FFF;
}

body{
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    font-family: 'karla', sans-serif;
    position:relative;
}

header{
    background-color: var(--primary-color);
    height: 70px;
    text-align: center;
    line-height: 70px;
    box-shadow: 0 1px 2px var(--shadow-color);
}

.header-title{
    color: black;
    font-size: 2rem;
}

main{
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    width: 90%;
    margin: 5vh auto;
    padding: 50px;
    box-shadow: 2px 2px 10px var(--shadow-color);
    gap: 20px;
}

footer{
    width:100;
    text-align: center;
    font-weight: 200;
    font-style: italic;
    padding: 20px;
}

@media (max-width:480px){
    header{
        position:fixed;
        width:100%;
    }
    .header-title{
        font-size: 1.5rem;
    }

    main{
        padding: 0;
        margin: 20px 0 0 0;
        width:100%;
        box-shadow: none;
    }
}
.modal{
    position: fixed;
    top:0;
    left:0;
    width: 100%;
    height: 100%;
    background: #00000090;
    opacity: 0;
    z-index: -1;
}

.modal.active{
    opacity: 1;
    z-index: 1;
}

.modal-content{
    display: flex;
    flex-direction: column;
    gap:20px;
    width: 50vw;
    margin: 15vh auto;
    padding-bottom: 20px;
    background-color: white;
    box-shadow: 1px 1px 10px black;
}

.modal-header{
    display: flex;
    position: relative;
    justify-content: center;
    height: 40px;
    line-height: 40px;
    font-size: 1rem;
}



.modal-close{
    position: absolute;
    right: 0;
    display: block;
    width: 40px;
    height: 40px;
    text-align: center;
    user-select: none;
    cursor: pointer;
}

.modal-close:hover{
    background-color: #FF4949;
    color: white;
}

.modal-form{
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
    padding: 0 20px;
}

.modal-field{
    width: calc(50% - 10px);
    height: 40px;
    outline-style: none;
    border-style: none;
    box-shadow: 0 0 2px black;
    padding: 0 10px;
    font-size:1rem;
}

.modal-field:focus{
    border: 2px solid var(--primary-color);
    box-shadow: 0 0 3px var(--primary-color);
}


.modal-footer{
    background-color: inherit;
    text-align: right;
    padding: 0 20px;
}

@media (max-width:480px){
    .modal{
        top:100%;
        transition: all 1s ease;
    }
    .modal.active{
        top:0;
    }
    .modal-content{
        margin:0;
        width:100%;
        position:fixed;
    }
    .modal-field{
        width:100%;
    }
}


.records{
    width: 100%;
    user-select: none;
    text-align: left;
}

.records th{
    height: 50px;
    background-color: var(--primary-color);
    padding-left: 20px;
    font-size: 1.2rem;    
}
.records td{
    height: 50px;
    padding-left: 20px;
}

.records th:last-child,
.records td:last-child{
    padding: 0;
    min-width: 140px;
    text-align: center;
}

.records tr:hover{
    background-color: var(--secundary-color);
}

@media(max-width:480px){
    .records{
        border-spacing: 5px;
    }
    .records thead{
        display:none;
    }
    .records tr{
        box-shadow: 0 1px 3px var(--shadow-color);
    }
    .records td:not(:first-child){
        display:flex;
        justify-content: space-between;
        padding: 0 20px;
    }

    .records td{
        margin:10px 0;
    }

    .records tr:hover{
        background-color: inherit;
    }
}




<!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Karla:ital,wght@0,400;0,700;1,200;1,800&display=swap"
        rel="stylesheet">
    <link rel="stylesheet" href="css/main.css">
    <link rel="stylesheet" href="css/button.css">
    <link rel="stylesheet" href="css/records.css">
    <link rel="stylesheet" href="css/modal.css">
    <script src="main.js" defer></script>
    <title>CRUD</title>
</head>

<body>
    <header>
        <h1 class="header-title">Cadastro de Clientes</h1>
    </header>
    <main>
        <button type="button" class="button blue mobile" id="cadastrarCliente">Cadastrar Cliente</button>
        <table id="tableClient" class="records">
            <thead>
                <tr>
                    <th>Nome</th>
                    <th>E-mail</th>
                    <th>Celular</th>
                    <th>Cidade</th>
                    <th>Ação</th>
                </tr>
            </thead>
            <tbody>

            </tbody>
        </table>
        <div class="modal" id="modal">
            <div class="modal-content">
                <header class="modal-header">
                    <h2>Novo Cliente</h2>
                    <span class="modal-close" id="modalClose">&#10006;</span>
                </header>
                <form id="form" class="modal-form">
                    <input type="text" id="nome" data-index="new" class="modal-field" placeholder="Nome do Cliente"
                        required>
                    <input type="email" id="email" class="modal-field" placeholder="e-mail do Cliente" required>
                    <input type="text" id="celular" class="modal-field" placeholder="Celular do Cliente" required>
                    <input type="text" id="cidade" class="modal-field" placeholder="Cidade do Cliente" required>
                </form>
                <footer class="modal-footer">
                    <button id="salvar" class="button green">Salvar</button>
                    <button id="cancelar" class="button blue">Cancelar</button>
                </footer>
            </div>
        </div>
    </main>
    <footer>
        Copyright &copy; Prof. Fernando Leonid
    </footer>
</body>

</html>

'use strict'

const openModal = () => document.getElementById('modal')
    .classList.add('active')

const closeModal = () => {
    clearFields()
    document.getElementById('modal').classList.remove('active')
}


const getLocalStorage = () => JSON.parse(localStorage.getItem('db_client')) ?? []
const setLocalStorage = (dbClient) => localStorage.setItem("db_client", JSON.stringify(dbClient))

// CRUD - create read update delete
const deleteClient = (index) => {
    const dbClient = readClient()
    dbClient.splice(index, 1)
    setLocalStorage(dbClient)
}

const updateClient = (index, client) => {
    const dbClient = readClient()
    dbClient[index] = client
    setLocalStorage(dbClient)
}

const readClient = () => getLocalStorage()

const createClient = (client) => {
    const dbClient = getLocalStorage()
    dbClient.push (client)
    setLocalStorage(dbClient)
}

const isValidFields = () => {
    return document.getElementById('form').reportValidity()
}

//Interação com o layout

const clearFields = () => {
    const fields = document.querySelectorAll('.modal-field')
    fields.forEach(field => field.value = "")
    document.getElementById('nome').dataset.index = 'new'
    document.querySelector(".modal-header>h2").textContent  = 'Novo Cliente'
}

const saveClient = () => {
    if (isValidFields()) {
        const client = {
            nome: document.getElementById('nome').value,
            email: document.getElementById('email').value,
            celular: document.getElementById('celular').value,
            cidade: document.getElementById('cidade').value
        }
        const index = document.getElementById('nome').dataset.index
        if (index == 'new') {
            createClient(client)
            updateTable()
            closeModal()
        } else {
            updateClient(index, client)
            updateTable()
            closeModal()
        }
    }
}

const createRow = (client, index) => {
    const newRow = document.createElement('tr')
    newRow.innerHTML = `
        <td>${client.nome}</td>
        <td>${client.email}</td>
        <td>${client.celular}</td>
        <td>${client.cidade}</td>
        <td>
            <button type="button" class="button green" id="edit-${index}">Editar</button>
            <button type="button" class="button red" id="delete-${index}" >Excluir</button>
        </td>
    `
    document.querySelector('#tableClient>tbody').appendChild(newRow)
}

const clearTable = () => {
    const rows = document.querySelectorAll('#tableClient>tbody tr')
    rows.forEach(row => row.parentNode.removeChild(row))
}

const updateTable = () => {
    const dbClient = readClient()
    clearTable()
    dbClient.forEach(createRow)
}

const fillFields = (client) => {
    document.getElementById('nome').value = client.nome
    document.getElementById('email').value = client.email
    document.getElementById('celular').value = client.celular
    document.getElementById('cidade').value = client.cidade
    document.getElementById('nome').dataset.index = client.index
}

const editClient = (index) => {
    const client = readClient()[index]
    client.index = index
    fillFields(client)
    document.querySelector(".modal-header>h2").textContent  = `Editando ${client.nome}`
    openModal()
}

const editDelete = (event) => {
    if (event.target.type == 'button') {

        const [action, index] = event.target.id.split('-')

        if (action == 'edit') {
            editClient(index)
        } else {
            const client = readClient()[index]
            const response = confirm(`Deseja realmente excluir o cliente ${client.nome}`)
            if (response) {
                deleteClient(index)
                updateTable()
            }
        }
    }
}

updateTable()

// Eventos
document.getElementById('cadastrarCliente')
    .addEventListener('click', openModal)

document.getElementById('modalClose')
    .addEventListener('click', closeModal)

document.getElementById('salvar')
    .addEventListener('click', saveClient)

document.querySelector('#tableClient>tbody')
    .addEventListener('click', editDelete)

document.getElementById('cancelar')
    .addEventListener('click', closeModal)